// Copyright (c) 2021, Oracle and/or its affiliates.
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/verrazzano/verrazzano/application-operator/apis/clusters/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeVerrazzanoProjectLists implements VerrazzanoProjectListInterface
type FakeVerrazzanoProjectLists struct {
	Fake *FakeClustersV1alpha1
	ns   string
}

var verrazzanoprojectlistsResource = schema.GroupVersionResource{Group: "clusters", Version: "v1alpha1", Resource: "verrazzanoprojectlists"}

var verrazzanoprojectlistsKind = schema.GroupVersionKind{Group: "clusters", Version: "v1alpha1", Kind: "VerrazzanoProjectList"}

// Get takes name of the verrazzanoProjectList, and returns the corresponding verrazzanoProjectList object, and an error if there is any.
func (c *FakeVerrazzanoProjectLists) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.VerrazzanoProjectList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(verrazzanoprojectlistsResource, c.ns, name), &v1alpha1.VerrazzanoProjectList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.VerrazzanoProjectList), err
}

// List takes label and field selectors, and returns the list of VerrazzanoProjectLists that match those selectors.
func (c *FakeVerrazzanoProjectLists) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.VerrazzanoProjectListList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(verrazzanoprojectlistsResource, verrazzanoprojectlistsKind, c.ns, opts), &v1alpha1.VerrazzanoProjectListList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.VerrazzanoProjectListList), err
}

// Watch returns a watch.Interface that watches the requested verrazzanoProjectLists.
func (c *FakeVerrazzanoProjectLists) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(verrazzanoprojectlistsResource, c.ns, opts))

}

// Create takes the representation of a verrazzanoProjectList and creates it.  Returns the server's representation of the verrazzanoProjectList, and an error, if there is any.
func (c *FakeVerrazzanoProjectLists) Create(ctx context.Context, verrazzanoProjectList *v1alpha1.VerrazzanoProjectList, opts v1.CreateOptions) (result *v1alpha1.VerrazzanoProjectList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(verrazzanoprojectlistsResource, c.ns, verrazzanoProjectList), &v1alpha1.VerrazzanoProjectList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.VerrazzanoProjectList), err
}

// Update takes the representation of a verrazzanoProjectList and updates it. Returns the server's representation of the verrazzanoProjectList, and an error, if there is any.
func (c *FakeVerrazzanoProjectLists) Update(ctx context.Context, verrazzanoProjectList *v1alpha1.VerrazzanoProjectList, opts v1.UpdateOptions) (result *v1alpha1.VerrazzanoProjectList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(verrazzanoprojectlistsResource, c.ns, verrazzanoProjectList), &v1alpha1.VerrazzanoProjectList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.VerrazzanoProjectList), err
}

// Delete takes name of the verrazzanoProjectList and deletes it. Returns an error if one occurs.
func (c *FakeVerrazzanoProjectLists) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(verrazzanoprojectlistsResource, c.ns, name), &v1alpha1.VerrazzanoProjectList{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeVerrazzanoProjectLists) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(verrazzanoprojectlistsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.VerrazzanoProjectListList{})
	return err
}

// Patch applies the patch and returns the patched verrazzanoProjectList.
func (c *FakeVerrazzanoProjectLists) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.VerrazzanoProjectList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(verrazzanoprojectlistsResource, c.ns, name, pt, data, subresources...), &v1alpha1.VerrazzanoProjectList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.VerrazzanoProjectList), err
}
