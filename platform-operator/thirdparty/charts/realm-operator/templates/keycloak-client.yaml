apiVersion: legacy.k8s.keycloak.org/v1alpha1
kind: KeycloakClient
metadata:
  name: verrazzano-pkce
  labels:
    app: verrazzano-{{ .Values.keycloakName }}
spec:
  realmSelector:
    matchLabels:
      app: verrazzano-{{ .Values.keycloakName }}
  client:
    clientId: verrazzano-pkce
    enabled: true
    surrogateAuthRequired: false
    clientAuthenticatorType: client-secret
    redirectUris:
      - https://verrazzano.{{ .Values.dns }}/*
      - https://verrazzano.{{ .Values.dns }}/verrazzano/authcallback
      - https://opensearch.vmi.system.{{ .Values.dns }}/*
      - https://opensearch.vmi.system.{{ .Values.dns }}/_authentication_callback
      - https://prometheus.vmi.system.{{ .Values.dns }}/*
      - https://prometheus.vmi.system.{{ .Values.dns }}/_authentication_callback
      - https://grafana.vmi.system.{{ .Values.dns }}/*
      - https://grafana.vmi.system.{{ .Values.dns }}/_authentication_callback
      - https://osd.vmi.system.{{ .Values.dns }}/*
      - https://osd.vmi.system.{{ .Values.dns }}/_authentication_callback
      - https://kiali.vmi.system.{{ .Values.dns }}/*
      - https://kiali.vmi.system.{{ .Values.dns }}/_authentication_callback
      - https://jaeger.{{ .Values.dns }}/*
    webOrigins:
      - https://verrazzano.{{ .Values.dns }}
      - https://opensearch.vmi.system.{{ .Values.dns }}
      - https://prometheus.vmi.system.{{ .Values.dns }}
      - https://osd.vmi.system.{{ .Values.dns }}
      - https://kibana.vmi.system.{{ .Values.dns }}
      - https://kiali.vmi.system.{{ .Values.dns }}
      - https://jaeger.{{ .Values.dns }}
    notBefore: 0
    bearerOnly: false
    consentRequired: false
    standardFlowEnabled: true
    implicitFlowEnabled: false
    directAccessGrantsEnabled: false
    serviceAccountsEnabled: false
    publicClient: true
    frontchannelLogout: false
    protocol: openid-connect
    attributes:
      saml.assertion.signature: 'false'
      saml.multivalued.roles: 'false'
      saml.force.post.binding: 'false'
      saml.encrypt: 'false'
      saml.server.signature: 'false'
      saml.server.signature.keyinfo.ext: 'false'
      exclude.session.state.from.auth.response: 'false'
      saml_force_name_id_format: 'false'
      saml.client.signature: 'false'
      tls.client.certificate.bound.access.tokens: 'false'
      saml.authnstatement: 'false'
      display.on.consent.screen: 'false'
      pkce.code.challenge.method: S256
      saml.onetimeuse.condition: 'false'
    authenticationFlowBindingOverrides: {}
    fullScopeAllowed: true
    nodeReRegistrationTimeout: -1
    protocolMappers:
      - name: groupmember
        protocol: openid-connect
        protocolMapper: oidc-group-membership-mapper
        consentRequired: false
        config:
          full.path: 'false'
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: groups
          userinfo.token.claim: 'true'
      - name: realm roles
        protocol: openid-connect
        protocolMapper: oidc-usermodel-realm-role-mapper
        consentRequired: false
        config:
          multivalued: 'true'
          user.attribute: foo
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: realm_access.roles
          jsonType.label: String
    defaultClientScopes:
      - web-origins
      - role_list
      - roles
      - profile
      - email
    optionalClientScopes:
      - address
      - phone
      - offline_access
      - microprofile-jwt
---
apiVersion: legacy.k8s.keycloak.org/v1alpha1
kind: KeycloakClient
metadata:
  name: verrazzano-pg
  namespace: keycloak
  labels:
    app: verrazzano-{{ .Values.keycloakName }}
spec:
  realmSelector:
    matchLabels:
      app: verrazzano-{{ .Values.keycloakName }}
  client:
    clientId: verrazzano-pg
    enabled: true
    rootUrl: ''
    adminUrl: ''
    surrogateAuthRequired: false
    directAccessGrantsEnabled: true
    clientAuthenticatorType: client-secret
    redirectUris: []
    webOrigins:
      - "+"
    notBefore: 0
    bearerOnly: false
    consentRequired: false
    standardFlowEnabled: false
    implicitFlowEnabled: false
    serviceAccountsEnabled: false
    publicClient: true
    frontchannelLogout: false
    protocol: openid-connect
    attributes: {}
    authenticationFlowBindingOverrides: {}
    fullScopeAllowed: true
    nodeReRegistrationTimeout: -1
    protocolMappers:
      - name: groups
        protocol: openid-connect
        protocolMapper: oidc-group-membership-mapper
        consentRequired: false
        config:
          multivalued: 'true'
          userinfo.token.claim: 'false'
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: groups
          jsonType.label: String
      - name: realm roles
        protocol: openid-connect
        protocolMapper: oidc-usermodel-realm-role-mapper
        consentRequired: false
        config:
          multivalued: 'true'
          user.attribute: foo
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: realm_access.roles
          jsonType.label: String
      - name: Client ID
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientId
          userinfo.token.claim: 'true'
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientId
          jsonType.label: String
      - name: Client IP Address
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientAddress
          userinfo.token.claim: 'true'
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientAddress
          jsonType.label: String
      - name: Client Host
        protocol: openid-connect
        protocolMapper: oidc-usersessionmodel-note-mapper
        consentRequired: false
        config:
          user.session.note: clientHost
          userinfo.token.claim: 'true'
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: clientHost
          jsonType.label: String
    defaultClientScopes:
      - web-origins
      - role_list
      - roles
      - profile
      - email
    optionalClientScopes:
      - address
      - phone
      - offline_access
      - microprofile-jwt
---
apiVersion: legacy.k8s.keycloak.org/v1alpha1
kind: KeycloakClient
metadata:
  name: managed-cluster
  namespace: keycloak
  labels:
    app: verrazzano-{{ .Values.keycloakName }}
spec:
  realmSelector:
    matchLabels:
      app: verrazzano-{{ .Values.keycloakName }}
  client:
    clientId: managed-cluster
    enabled: true
    surrogateAuthRequired: false
    alwaysDisplayInConsole: false
    clientAuthenticatorType: client-secret
    redirectUris:
      - https://prometheus.vmi.system.{{ .Values.dns }}/*
      - https://prometheus.vmi.system.{{ .Values.dns }}/_authentication_callback
    webOrigins:
      - https://prometheus.vmi.system.{{ .Values.dns }}
    notBefore: 0
    bearerOnly: false
    consentRequired: false
    standardFlowEnabled: true
    implicitFlowEnabled: false
    directAccessGrantsEnabled: false
    serviceAccountsEnabled: false
    publicClient: true
    frontchannelLogout: false
    protocol: openid-connect
    attributes:
      saml.assertion.signature: 'false'
      saml.multivalued.roles: 'false'
      saml.force.post.binding: 'false'
      saml.encrypt: 'false'
      saml.server.signature: 'false'
      saml.server.signature.keyinfo.ext: 'false'
      exclude.session.state.from.auth.response: 'false'
      saml_force_name_id_format: 'false'
      saml.client.signature: 'false'
      tls.client.certificate.bound.access.tokens: 'false'
      saml.authnstatement: 'false'
      display.on.consent.screen: 'false'
      pkce.code.challenge.method: S256
      saml.onetimeuse.condition: 'false'
    authenticationFlowBindingOverrides: {}
    fullScopeAllowed: true
    nodeReRegistrationTimeout: -1
    protocolMappers:
      - name: groupmember
        protocol: openid-connect
        protocolMapper: oidc-group-membership-mapper
        consentRequired: false
        config:
          full.path: 'false'
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: groups
          userinfo.token.claim: 'true'
      - name: realm roles
        protocol: openid-connect
        protocolMapper: oidc-usermodel-realm-role-mapper
        consentRequired: false
        config:
          multivalued: 'true'
          user.attribute: foo
          id.token.claim: 'true'
          access.token.claim: 'true'
          claim.name: realm_access.roles
          jsonType.label: String
    defaultClientScopes:
      - web-origins
      - role_list
      - roles
      - profile
      - email
    optionalClientScopes:
      - address
      - phone
      - offline_access
      - microprofile-jwt
